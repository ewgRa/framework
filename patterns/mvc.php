<?php
	/**
	 * Черновик, попытка описать существующий/идеальный MCV паттерн
	 *
	 */
	
	class MVC_DataCollector
	{
		//Запись и извлечение данных
	}

	class MVC_Engine
	{
		//UserController		}
		//LanguageCntroller		 } данные этих модулей, либо сами эти модули вносим в Registry
		//PageController		}  эти данные нужны будут для контроллеров и модели
		//ModuleLoaderController - узнает какие контроллеры надо инициировать
		//Инициирование выполняется вызовом метода Controller->Initialize
		
		/*
		 * Контроллеры модулей подписываются на события, при этом могут их инициировать сами
		 * На этом этапе контроллеры подписывают на события все свои обработчики событий.
		 * При этом подписаться на событие можно как Донор (генератор данных ) или Реципиент ( приниматель данных )
		 * Инициализатор события указывает данные, которые будут передаваться донорам по ссылке
		 * Доноры принимаемые данные могут изменить, добавиться в них и т.д.
		 * Результат работы доноров передается реципиентам
		 * На этом этапе строится таблица событий:
		 	СОБЫТИЕ | ОЧЕРЕДЬ | ДОНОРЫ | РЕЦИПИЕНТЫ
		 	OnData	|		  | Modules| DataCollector->SetData

		 	Как только донор отрабатывается - он "удаляется" из списка доноров. Событие выполняется до
		 	тех пор, пока в списке есть доноры.
		 	Событие не выполняется, если реципиент отсутствует. Риципиентом может являтся DummyRecipient класс, в этом случае Доноры сами являются реципиентами, например они
		 	инициализируют свои какие-то данные, настраивают себя каким-то образом
		 	Контроллер может удалить себя из списка доноров, реципиентов для любого события
		 	
		 */
		
		//ViewController
	}

	class MVC_EngineEvents
	{
		/*
		 * Выполнение событий, то есть по сути "действий" контроллеров, они сами знают куда и какую информацию запихать
		 */
	}

	class MVC_Model
	{
		//по входным параметрам извлекаем информацию, здесь выясняем, какое действие надо выполнить
		//результат действия возвращаем в контроллер
	}
	
	class MVC_Model_Action
	{
		//по входным параметрам извлекаем информацию, возвращаем в модель
	}

	class MVC_Controller
	{
		//по входным данным, которые можем извлечь из Registry формируем входные параметры для модели		
	}
	
	class MVC_View
	{
		//извлекаем данные из ДатаКоллектора и выводим их в зависимости от представления		
	}
?>